/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.9.1
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { InlineResponse20018 } from '../model/inlineResponse20018';
import { InlineResponse20033 } from '../model/inlineResponse20033';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class TokensService {

    protected basePath = 'https://www.bungie.net/Platform';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Apply a partner offer to the targeted user. This endpoint does not claim a new offer, but any already claimed offers will be applied to the game if not already.
     * @param partnerApplicationId The partner application identifier.
     * @param targetBnetMembershipId The bungie.net user to apply missing offers to. If not self, elevated permissions are required.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public tokensApplyMissingPartnerOffersWithoutClaim(partnerApplicationId: number, targetBnetMembershipId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20018>;
    public tokensApplyMissingPartnerOffersWithoutClaim(partnerApplicationId: number, targetBnetMembershipId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20018>>;
    public tokensApplyMissingPartnerOffersWithoutClaim(partnerApplicationId: number, targetBnetMembershipId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20018>>;
    public tokensApplyMissingPartnerOffersWithoutClaim(partnerApplicationId: number, targetBnetMembershipId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (partnerApplicationId === null || partnerApplicationId === undefined) {
            throw new Error('Required parameter partnerApplicationId was null or undefined when calling tokensApplyMissingPartnerOffersWithoutClaim.');
        }
        if (targetBnetMembershipId === null || targetBnetMembershipId === undefined) {
            throw new Error('Required parameter targetBnetMembershipId was null or undefined when calling tokensApplyMissingPartnerOffersWithoutClaim.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20018>(`${this.configuration.basePath}/Tokens/Partner/ApplyMissingOffers/${encodeURIComponent(String(partnerApplicationId))}/${encodeURIComponent(String(targetBnetMembershipId))}/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Claim a partner offer as the authenticated user.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public tokensClaimPartnerOffer(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20018>;
    public tokensClaimPartnerOffer(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20018>>;
    public tokensClaimPartnerOffer(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20018>>;
    public tokensClaimPartnerOffer(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20018>(`${this.configuration.basePath}/Tokens/Partner/ClaimOffer/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns the partner sku and offer history of the targeted user. Elevated permissions are required to see users that are not yourself.
     * @param partnerApplicationId The partner application identifier.
     * @param targetBnetMembershipId The bungie.net user to apply missing offers to. If not self, elevated permissions are required.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public tokensGetPartnerOfferSkuHistory(partnerApplicationId: number, targetBnetMembershipId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20033>;
    public tokensGetPartnerOfferSkuHistory(partnerApplicationId: number, targetBnetMembershipId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20033>>;
    public tokensGetPartnerOfferSkuHistory(partnerApplicationId: number, targetBnetMembershipId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20033>>;
    public tokensGetPartnerOfferSkuHistory(partnerApplicationId: number, targetBnetMembershipId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (partnerApplicationId === null || partnerApplicationId === undefined) {
            throw new Error('Required parameter partnerApplicationId was null or undefined when calling tokensGetPartnerOfferSkuHistory.');
        }
        if (targetBnetMembershipId === null || targetBnetMembershipId === undefined) {
            throw new Error('Required parameter targetBnetMembershipId was null or undefined when calling tokensGetPartnerOfferSkuHistory.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20033>(`${this.configuration.basePath}/Tokens/Partner/History/${encodeURIComponent(String(partnerApplicationId))}/${encodeURIComponent(String(targetBnetMembershipId))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
