/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from "@angular/core";
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from "@angular/common/http";
import { CustomHttpParameterCodec } from "../encoder";
import { Observable } from "rxjs";

// @ts-ignore
import { ForumGetForumTagSuggestions200Response } from "../model/forumGetForumTagSuggestions200Response";
// @ts-ignore
import { ForumGetRecruitmentThreadSummaries200Response } from "../model/forumGetRecruitmentThreadSummaries200Response";
// @ts-ignore
import { ForumGetTopicForContent200Response } from "../model/forumGetTopicForContent200Response";
// @ts-ignore
import { ForumGetTopicsPaged200Response } from "../model/forumGetTopicsPaged200Response";

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from "../variables";
import { Configuration } from "../configuration";

@Injectable({
  providedIn: "root",
})
export class ForumService {
  protected basePath = "https://www.bungie.net/Platform";
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  // @ts-ignore
  private addToHttpParams(
    httpParams: HttpParams,
    value: any,
    key?: string
  ): HttpParams {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(
    httpParams: HttpParams,
    value?: any,
    key?: string
  ): HttpParams {
    if (value == null) {
      return httpParams;
    }
    return httpParams;
  }

    if (typeof value === "object") {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) =>
            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(
            key,
            (value as Date).toISOString().substr(0, 10)
          );
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}.${k}` : k
            ))
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }

  /**
   * Gets a listing of all topics marked as part of the core group.
   * @param categoryFilter The category filter.
   * @param page Zero base page
   * @param quickDate The date filter.
   * @param sort The sort mode.
   * @param locales Comma seperated list of locales posts must match to return in the result list. Default \&#39;en\&#39;
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public forumGetCoreTopicsPaged(
    categoryFilter: number,
    page: number,
    quickDate: number,
    sort: number,
    locales?: string,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<ForumGetTopicsPaged200Response>;
  public forumGetCoreTopicsPaged(
    categoryFilter: number,
    page: number,
    quickDate: number,
    sort: number,
    locales?: string,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<ForumGetTopicsPaged200Response>>;
  public forumGetCoreTopicsPaged(
    categoryFilter: number,
    page: number,
    quickDate: number,
    sort: number,
    locales?: string,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<ForumGetTopicsPaged200Response>>;
  public forumGetCoreTopicsPaged(
    categoryFilter: number,
    page: number,
    quickDate: number,
    sort: number,
    locales?: string,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    if (categoryFilter === null || categoryFilter === undefined) {
      throw new Error(
        "Required parameter categoryFilter was null or undefined when calling forumGetCoreTopicsPaged."
      );
    }
    if (page === null || page === undefined) {
      throw new Error(
        "Required parameter page was null or undefined when calling forumGetCoreTopicsPaged."
      );
    }
    if (quickDate === null || quickDate === undefined) {
      throw new Error(
        "Required parameter quickDate was null or undefined when calling forumGetCoreTopicsPaged."
      );
    }
    if (sort === null || sort === undefined) {
      throw new Error(
        "Required parameter sort was null or undefined when calling forumGetCoreTopicsPaged."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (locales !== undefined && locales !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>locales,
        "locales"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.get<ForumGetTopicsPaged200Response>(
      `${
        this.configuration.basePath
      }/Forum/GetCoreTopicsPaged/${encodeURIComponent(
        String(page)
      )}/${encodeURIComponent(String(sort))}/${encodeURIComponent(
        String(quickDate)
      )}/${encodeURIComponent(String(categoryFilter))}/`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
   * @param partialtag The partial tag input to generate suggestions from.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public forumGetForumTagSuggestions(
    partialtag?: string,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<ForumGetForumTagSuggestions200Response>;
  public forumGetForumTagSuggestions(
    partialtag?: string,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<ForumGetForumTagSuggestions200Response>>;
  public forumGetForumTagSuggestions(
    partialtag?: string,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<ForumGetForumTagSuggestions200Response>>;
  public forumGetForumTagSuggestions(
    partialtag?: string,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (partialtag !== undefined && partialtag !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>partialtag,
        "partialtag"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.get<ForumGetForumTagSuggestions200Response>(
      `${this.configuration.basePath}/Forum/GetForumTagSuggestions/`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Gets the specified forum poll.
   * @param topicId The post id of the topic that has the poll.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public forumGetPoll(
    topicId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<ForumGetTopicsPaged200Response>;
  public forumGetPoll(
    topicId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<ForumGetTopicsPaged200Response>>;
  public forumGetPoll(
    topicId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<ForumGetTopicsPaged200Response>>;
  public forumGetPoll(
    topicId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    if (topicId === null || topicId === undefined) {
      throw new Error(
        "Required parameter topicId was null or undefined when calling forumGetPoll."
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.get<ForumGetTopicsPaged200Response>(
      `${this.configuration.basePath}/Forum/Poll/${encodeURIComponent(
        String(topicId)
      )}/`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns the post specified and its immediate parent.
   * @param childPostId
   * @param showbanned If this value is not null or empty, banned posts are requested to be returned
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public forumGetPostAndParent(
    childPostId: number,
    showbanned?: string,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<ForumGetTopicsPaged200Response>;
  public forumGetPostAndParent(
    childPostId: number,
    showbanned?: string,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<ForumGetTopicsPaged200Response>>;
  public forumGetPostAndParent(
    childPostId: number,
    showbanned?: string,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<ForumGetTopicsPaged200Response>>;
  public forumGetPostAndParent(
    childPostId: number,
    showbanned?: string,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    if (childPostId === null || childPostId === undefined) {
      throw new Error(
        "Required parameter childPostId was null or undefined when calling forumGetPostAndParent."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (showbanned !== undefined && showbanned !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>showbanned,
        "showbanned"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.get<ForumGetTopicsPaged200Response>(
      `${
        this.configuration.basePath
      }/Forum/GetPostAndParent/${encodeURIComponent(String(childPostId))}/`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns the post specified and its immediate parent of posts that are awaiting approval.
   * @param childPostId
   * @param showbanned If this value is not null or empty, banned posts are requested to be returned
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public forumGetPostAndParentAwaitingApproval(
    childPostId: number,
    showbanned?: string,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<ForumGetTopicsPaged200Response>;
  public forumGetPostAndParentAwaitingApproval(
    childPostId: number,
    showbanned?: string,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<ForumGetTopicsPaged200Response>>;
  public forumGetPostAndParentAwaitingApproval(
    childPostId: number,
    showbanned?: string,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<ForumGetTopicsPaged200Response>>;
  public forumGetPostAndParentAwaitingApproval(
    childPostId: number,
    showbanned?: string,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    if (childPostId === null || childPostId === undefined) {
      throw new Error(
        "Required parameter childPostId was null or undefined when calling forumGetPostAndParentAwaitingApproval."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (showbanned !== undefined && showbanned !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>showbanned,
        "showbanned"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.get<ForumGetTopicsPaged200Response>(
      `${
        this.configuration.basePath
      }/Forum/GetPostAndParentAwaitingApproval/${encodeURIComponent(
        String(childPostId)
      )}/`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
   * @param getParentPost
   * @param page
   * @param pageSize
   * @param parentPostId
   * @param replySize
   * @param rootThreadMode
   * @param sortMode
   * @param showbanned If this value is not null or empty, banned posts are requested to be returned
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public forumGetPostsThreadedPaged(
    getParentPost: boolean,
    page: number,
    pageSize: number,
    parentPostId: number,
    replySize: number,
    rootThreadMode: boolean,
    sortMode: number,
    showbanned?: string,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<ForumGetTopicsPaged200Response>;
  public forumGetPostsThreadedPaged(
    getParentPost: boolean,
    page: number,
    pageSize: number,
    parentPostId: number,
    replySize: number,
    rootThreadMode: boolean,
    sortMode: number,
    showbanned?: string,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<ForumGetTopicsPaged200Response>>;
  public forumGetPostsThreadedPaged(
    getParentPost: boolean,
    page: number,
    pageSize: number,
    parentPostId: number,
    replySize: number,
    rootThreadMode: boolean,
    sortMode: number,
    showbanned?: string,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<ForumGetTopicsPaged200Response>>;
  public forumGetPostsThreadedPaged(
    getParentPost: boolean,
    page: number,
    pageSize: number,
    parentPostId: number,
    replySize: number,
    rootThreadMode: boolean,
    sortMode: number,
    showbanned?: string,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    if (getParentPost === null || getParentPost === undefined) {
      throw new Error(
        "Required parameter getParentPost was null or undefined when calling forumGetPostsThreadedPaged."
      );
    }
    if (page === null || page === undefined) {
      throw new Error(
        "Required parameter page was null or undefined when calling forumGetPostsThreadedPaged."
      );
    }
    if (pageSize === null || pageSize === undefined) {
      throw new Error(
        "Required parameter pageSize was null or undefined when calling forumGetPostsThreadedPaged."
      );
    }
    if (parentPostId === null || parentPostId === undefined) {
      throw new Error(
        "Required parameter parentPostId was null or undefined when calling forumGetPostsThreadedPaged."
      );
    }
    if (replySize === null || replySize === undefined) {
      throw new Error(
        "Required parameter replySize was null or undefined when calling forumGetPostsThreadedPaged."
      );
    }
    if (rootThreadMode === null || rootThreadMode === undefined) {
      throw new Error(
        "Required parameter rootThreadMode was null or undefined when calling forumGetPostsThreadedPaged."
      );
    }
    if (sortMode === null || sortMode === undefined) {
      throw new Error(
        "Required parameter sortMode was null or undefined when calling forumGetPostsThreadedPaged."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (showbanned !== undefined && showbanned !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>showbanned,
        "showbanned"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.get<ForumGetTopicsPaged200Response>(
      `${
        this.configuration.basePath
      }/Forum/GetPostsThreadedPaged/${encodeURIComponent(
        String(parentPostId)
      )}/${encodeURIComponent(String(page))}/${encodeURIComponent(
        String(pageSize)
      )}/${encodeURIComponent(String(replySize))}/${encodeURIComponent(
        String(getParentPost)
      )}/${encodeURIComponent(String(rootThreadMode))}/${encodeURIComponent(
        String(sortMode)
      )}/`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
   * @param childPostId
   * @param page
   * @param pageSize
   * @param replySize
   * @param rootThreadMode
   * @param sortMode
   * @param showbanned If this value is not null or empty, banned posts are requested to be returned
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public forumGetPostsThreadedPagedFromChild(
    childPostId: number,
    page: number,
    pageSize: number,
    replySize: number,
    rootThreadMode: boolean,
    sortMode: number,
    showbanned?: string,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<ForumGetTopicsPaged200Response>;
  public forumGetPostsThreadedPagedFromChild(
    childPostId: number,
    page: number,
    pageSize: number,
    replySize: number,
    rootThreadMode: boolean,
    sortMode: number,
    showbanned?: string,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<ForumGetTopicsPaged200Response>>;
  public forumGetPostsThreadedPagedFromChild(
    childPostId: number,
    page: number,
    pageSize: number,
    replySize: number,
    rootThreadMode: boolean,
    sortMode: number,
    showbanned?: string,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<ForumGetTopicsPaged200Response>>;
  public forumGetPostsThreadedPagedFromChild(
    childPostId: number,
    page: number,
    pageSize: number,
    replySize: number,
    rootThreadMode: boolean,
    sortMode: number,
    showbanned?: string,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    if (childPostId === null || childPostId === undefined) {
      throw new Error(
        "Required parameter childPostId was null or undefined when calling forumGetPostsThreadedPagedFromChild."
      );
    }
    if (page === null || page === undefined) {
      throw new Error(
        "Required parameter page was null or undefined when calling forumGetPostsThreadedPagedFromChild."
      );
    }
    if (pageSize === null || pageSize === undefined) {
      throw new Error(
        "Required parameter pageSize was null or undefined when calling forumGetPostsThreadedPagedFromChild."
      );
    }
    if (replySize === null || replySize === undefined) {
      throw new Error(
        "Required parameter replySize was null or undefined when calling forumGetPostsThreadedPagedFromChild."
      );
    }
    if (rootThreadMode === null || rootThreadMode === undefined) {
      throw new Error(
        "Required parameter rootThreadMode was null or undefined when calling forumGetPostsThreadedPagedFromChild."
      );
    }
    if (sortMode === null || sortMode === undefined) {
      throw new Error(
        "Required parameter sortMode was null or undefined when calling forumGetPostsThreadedPagedFromChild."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (showbanned !== undefined && showbanned !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>showbanned,
        "showbanned"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.get<ForumGetTopicsPaged200Response>(
      `${
        this.configuration.basePath
      }/Forum/GetPostsThreadedPagedFromChild/${encodeURIComponent(
        String(childPostId)
      )}/${encodeURIComponent(String(page))}/${encodeURIComponent(
        String(pageSize)
      )}/${encodeURIComponent(String(replySize))}/${encodeURIComponent(
        String(rootThreadMode)
      )}/${encodeURIComponent(String(sortMode))}/`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Allows the caller to get a list of to 25 recruitment thread summary information objects.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public forumGetRecruitmentThreadSummaries(
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<ForumGetRecruitmentThreadSummaries200Response>;
  public forumGetRecruitmentThreadSummaries(
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<ForumGetRecruitmentThreadSummaries200Response>>;
  public forumGetRecruitmentThreadSummaries(
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<ForumGetRecruitmentThreadSummaries200Response>>;
  public forumGetRecruitmentThreadSummaries(
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.post<ForumGetRecruitmentThreadSummaries200Response>(
      `${this.configuration.basePath}/Forum/Recruit/Summaries/`,
      null,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Gets the post Id for the given content item\&#39;s comments, if it exists.
   * @param contentId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public forumGetTopicForContent(
    contentId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<ForumGetTopicForContent200Response>;
  public forumGetTopicForContent(
    contentId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<ForumGetTopicForContent200Response>>;
  public forumGetTopicForContent(
    contentId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<ForumGetTopicForContent200Response>>;
  public forumGetTopicForContent(
    contentId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    if (contentId === null || contentId === undefined) {
      throw new Error(
        "Required parameter contentId was null or undefined when calling forumGetTopicForContent."
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.get<ForumGetTopicForContent200Response>(
      `${
        this.configuration.basePath
      }/Forum/GetTopicForContent/${encodeURIComponent(String(contentId))}/`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get topics from any forum.
   * @param categoryFilter A category filter
   * @param group The group, if any.
   * @param page Zero paged page number
   * @param pageSize Unused
   * @param quickDate A date filter.
   * @param sort The sort mode.
   * @param locales Comma seperated list of locales posts must match to return in the result list. Default \&#39;en\&#39;
   * @param tagstring The tags to search, if any.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public forumGetTopicsPaged(
    categoryFilter: number,
    group: number,
    page: number,
    pageSize: number,
    quickDate: number,
    sort: number,
    locales?: string,
    tagstring?: string,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<ForumGetTopicsPaged200Response>;
  public forumGetTopicsPaged(
    categoryFilter: number,
    group: number,
    page: number,
    pageSize: number,
    quickDate: number,
    sort: number,
    locales?: string,
    tagstring?: string,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<ForumGetTopicsPaged200Response>>;
  public forumGetTopicsPaged(
    categoryFilter: number,
    group: number,
    page: number,
    pageSize: number,
    quickDate: number,
    sort: number,
    locales?: string,
    tagstring?: string,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<ForumGetTopicsPaged200Response>>;
  public forumGetTopicsPaged(
    categoryFilter: number,
    group: number,
    page: number,
    pageSize: number,
    quickDate: number,
    sort: number,
    locales?: string,
    tagstring?: string,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    if (categoryFilter === null || categoryFilter === undefined) {
      throw new Error(
        "Required parameter categoryFilter was null or undefined when calling forumGetTopicsPaged."
      );
    }
    if (group === null || group === undefined) {
      throw new Error(
        "Required parameter group was null or undefined when calling forumGetTopicsPaged."
      );
    }
    if (page === null || page === undefined) {
      throw new Error(
        "Required parameter page was null or undefined when calling forumGetTopicsPaged."
      );
    }
    if (pageSize === null || pageSize === undefined) {
      throw new Error(
        "Required parameter pageSize was null or undefined when calling forumGetTopicsPaged."
      );
    }
    if (quickDate === null || quickDate === undefined) {
      throw new Error(
        "Required parameter quickDate was null or undefined when calling forumGetTopicsPaged."
      );
    }
    if (sort === null || sort === undefined) {
      throw new Error(
        "Required parameter sort was null or undefined when calling forumGetTopicsPaged."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (locales !== undefined && locales !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>locales,
        "locales"
      );
    }
    if (tagstring !== undefined && tagstring !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>tagstring,
        "tagstring"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.get<ForumGetTopicsPaged200Response>(
      `${this.configuration.basePath}/Forum/GetTopicsPaged/${encodeURIComponent(
        String(page)
      )}/${encodeURIComponent(String(pageSize))}/${encodeURIComponent(
        String(group)
      )}/${encodeURIComponent(String(sort))}/${encodeURIComponent(
        String(quickDate)
      )}/${encodeURIComponent(String(categoryFilter))}/`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
