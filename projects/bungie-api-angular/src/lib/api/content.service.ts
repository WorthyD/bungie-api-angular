/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.17.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { ContentGetContentById200Response } from '../model/contentGetContentById200Response';
// @ts-ignore
import { ContentGetContentType200Response } from '../model/contentGetContentType200Response';
// @ts-ignore
import { ContentRssNewsArticles200Response } from '../model/contentRssNewsArticles200Response';
// @ts-ignore
import { ContentSearchContentWithText200Response } from '../model/contentSearchContentWithText200Response';
// @ts-ignore
import { ContentSearchHelpArticles200Response } from '../model/contentSearchHelpArticles200Response';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable({
  providedIn: 'root'
})
export class ContentService {
  protected basePath = 'https://www.bungie.net/Platform';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  // @ts-ignore
  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach((elem) => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) => (httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k))
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * Returns a content item referenced by id
   * @param id
   * @param locale
   * @param head false
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public contentGetContentById(
    id: number,
    locale: string,
    head?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<ContentGetContentById200Response>;
  public contentGetContentById(
    id: number,
    locale: string,
    head?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<HttpResponse<ContentGetContentById200Response>>;
  public contentGetContentById(
    id: number,
    locale: string,
    head?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<HttpEvent<ContentGetContentById200Response>>;
  public contentGetContentById(
    id: number,
    locale: string,
    head?: boolean,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling contentGetContentById.');
    }
    if (locale === null || locale === undefined) {
      throw new Error('Required parameter locale was null or undefined when calling contentGetContentById.');
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (head !== undefined && head !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>head, 'head');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'json';
      }
    }

    return this.httpClient.get<ContentGetContentById200Response>(
      `${this.configuration.basePath}/Content/GetContentById/${encodeURIComponent(String(id))}/${encodeURIComponent(
        String(locale)
      )}/`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Returns the newest item that matches a given tag and Content Type.
   * @param locale
   * @param tag
   * @param type
   * @param head Not used.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public contentGetContentByTagAndType(
    locale: string,
    tag: string,
    type: string,
    head?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<ContentGetContentById200Response>;
  public contentGetContentByTagAndType(
    locale: string,
    tag: string,
    type: string,
    head?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<HttpResponse<ContentGetContentById200Response>>;
  public contentGetContentByTagAndType(
    locale: string,
    tag: string,
    type: string,
    head?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<HttpEvent<ContentGetContentById200Response>>;
  public contentGetContentByTagAndType(
    locale: string,
    tag: string,
    type: string,
    head?: boolean,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<any> {
    if (locale === null || locale === undefined) {
      throw new Error('Required parameter locale was null or undefined when calling contentGetContentByTagAndType.');
    }
    if (tag === null || tag === undefined) {
      throw new Error('Required parameter tag was null or undefined when calling contentGetContentByTagAndType.');
    }
    if (type === null || type === undefined) {
      throw new Error('Required parameter type was null or undefined when calling contentGetContentByTagAndType.');
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (head !== undefined && head !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>head, 'head');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'json';
      }
    }

    return this.httpClient.get<ContentGetContentById200Response>(
      `${this.configuration.basePath}/Content/GetContentByTagAndType/${encodeURIComponent(
        String(tag)
      )}/${encodeURIComponent(String(type))}/${encodeURIComponent(String(locale))}/`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets an object describing a particular variant of content.
   * @param type
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public contentGetContentType(
    type: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<ContentGetContentType200Response>;
  public contentGetContentType(
    type: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<HttpResponse<ContentGetContentType200Response>>;
  public contentGetContentType(
    type: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<HttpEvent<ContentGetContentType200Response>>;
  public contentGetContentType(
    type: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<any> {
    if (type === null || type === undefined) {
      throw new Error('Required parameter type was null or undefined when calling contentGetContentType.');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'json';
      }
    }

    return this.httpClient.get<ContentGetContentType200Response>(
      `${this.configuration.basePath}/Content/GetContentType/${encodeURIComponent(String(type))}/`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Returns a JSON string response that is the RSS feed for news articles.
   * @param pageToken Zero-based pagination token for paging through result sets.
   * @param categoryfilter Optionally filter response to only include news items in a certain category.
   * @param includebody Optionally include full content body for each news item.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public contentRssNewsArticles(
    pageToken: string,
    categoryfilter?: string,
    includebody?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<ContentRssNewsArticles200Response>;
  public contentRssNewsArticles(
    pageToken: string,
    categoryfilter?: string,
    includebody?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<HttpResponse<ContentRssNewsArticles200Response>>;
  public contentRssNewsArticles(
    pageToken: string,
    categoryfilter?: string,
    includebody?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<HttpEvent<ContentRssNewsArticles200Response>>;
  public contentRssNewsArticles(
    pageToken: string,
    categoryfilter?: string,
    includebody?: boolean,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<any> {
    if (pageToken === null || pageToken === undefined) {
      throw new Error('Required parameter pageToken was null or undefined when calling contentRssNewsArticles.');
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (categoryfilter !== undefined && categoryfilter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>categoryfilter, 'categoryfilter');
    }
    if (includebody !== undefined && includebody !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>includebody, 'includebody');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'json';
      }
    }

    return this.httpClient.get<ContentRssNewsArticles200Response>(
      `${this.configuration.basePath}/Content/Rss/NewsArticles/${encodeURIComponent(String(pageToken))}/`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Searches for Content Items that match the given Tag and Content Type.
   * @param locale
   * @param tag
   * @param type
   * @param currentpage Page number for the search results starting with page 1.
   * @param head Not used.
   * @param itemsperpage Not used.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public contentSearchContentByTagAndType(
    locale: string,
    tag: string,
    type: string,
    currentpage?: number,
    head?: boolean,
    itemsperpage?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<ContentSearchContentWithText200Response>;
  public contentSearchContentByTagAndType(
    locale: string,
    tag: string,
    type: string,
    currentpage?: number,
    head?: boolean,
    itemsperpage?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<HttpResponse<ContentSearchContentWithText200Response>>;
  public contentSearchContentByTagAndType(
    locale: string,
    tag: string,
    type: string,
    currentpage?: number,
    head?: boolean,
    itemsperpage?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<HttpEvent<ContentSearchContentWithText200Response>>;
  public contentSearchContentByTagAndType(
    locale: string,
    tag: string,
    type: string,
    currentpage?: number,
    head?: boolean,
    itemsperpage?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<any> {
    if (locale === null || locale === undefined) {
      throw new Error('Required parameter locale was null or undefined when calling contentSearchContentByTagAndType.');
    }
    if (tag === null || tag === undefined) {
      throw new Error('Required parameter tag was null or undefined when calling contentSearchContentByTagAndType.');
    }
    if (type === null || type === undefined) {
      throw new Error('Required parameter type was null or undefined when calling contentSearchContentByTagAndType.');
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (currentpage !== undefined && currentpage !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>currentpage, 'currentpage');
    }
    if (head !== undefined && head !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>head, 'head');
    }
    if (itemsperpage !== undefined && itemsperpage !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>itemsperpage, 'itemsperpage');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'json';
      }
    }

    return this.httpClient.get<ContentSearchContentWithText200Response>(
      `${this.configuration.basePath}/Content/SearchContentByTagAndType/${encodeURIComponent(
        String(tag)
      )}/${encodeURIComponent(String(type))}/${encodeURIComponent(String(locale))}/`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets content based on querystring information passed in. Provides basic search and text search capabilities.
   * @param locale
   * @param ctype Content type tag: Help, News, etc. Supply multiple ctypes separated by space.
   * @param currentpage Page number for the search results, starting with page 1.
   * @param head Not used.
   * @param searchtext Word or phrase for the search.
   * @param source For analytics, hint at the part of the app that triggered the search. Optional.
   * @param tag Tag used on the content to be searched.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public contentSearchContentWithText(
    locale: string,
    ctype?: string,
    currentpage?: number,
    head?: boolean,
    searchtext?: string,
    source?: string,
    tag?: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<ContentSearchContentWithText200Response>;
  public contentSearchContentWithText(
    locale: string,
    ctype?: string,
    currentpage?: number,
    head?: boolean,
    searchtext?: string,
    source?: string,
    tag?: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<HttpResponse<ContentSearchContentWithText200Response>>;
  public contentSearchContentWithText(
    locale: string,
    ctype?: string,
    currentpage?: number,
    head?: boolean,
    searchtext?: string,
    source?: string,
    tag?: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<HttpEvent<ContentSearchContentWithText200Response>>;
  public contentSearchContentWithText(
    locale: string,
    ctype?: string,
    currentpage?: number,
    head?: boolean,
    searchtext?: string,
    source?: string,
    tag?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<any> {
    if (locale === null || locale === undefined) {
      throw new Error('Required parameter locale was null or undefined when calling contentSearchContentWithText.');
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (ctype !== undefined && ctype !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>ctype, 'ctype');
    }
    if (currentpage !== undefined && currentpage !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>currentpage, 'currentpage');
    }
    if (head !== undefined && head !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>head, 'head');
    }
    if (searchtext !== undefined && searchtext !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>searchtext, 'searchtext');
    }
    if (source !== undefined && source !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>source, 'source');
    }
    if (tag !== undefined && tag !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>tag, 'tag');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'json';
      }
    }

    return this.httpClient.get<ContentSearchContentWithText200Response>(
      `${this.configuration.basePath}/Content/Search/${encodeURIComponent(String(locale))}/`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Search for Help Articles.
   * @param searchtext
   * @param size
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public contentSearchHelpArticles(
    searchtext: string,
    size: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<ContentSearchHelpArticles200Response>;
  public contentSearchHelpArticles(
    searchtext: string,
    size: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<HttpResponse<ContentSearchHelpArticles200Response>>;
  public contentSearchHelpArticles(
    searchtext: string,
    size: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<HttpEvent<ContentSearchHelpArticles200Response>>;
  public contentSearchHelpArticles(
    searchtext: string,
    size: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*'; context?: HttpContext }
  ): Observable<any> {
    if (searchtext === null || searchtext === undefined) {
      throw new Error('Required parameter searchtext was null or undefined when calling contentSearchHelpArticles.');
    }
    if (size === null || size === undefined) {
      throw new Error('Required parameter size was null or undefined when calling contentSearchHelpArticles.');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'json';
      }
    }

    return this.httpClient.get<ContentSearchHelpArticles200Response>(
      `${this.configuration.basePath}/Content/SearchHelpArticles/${encodeURIComponent(
        String(searchtext)
      )}/${encodeURIComponent(String(size))}/`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
