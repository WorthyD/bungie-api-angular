/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from "@angular/core";
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from "@angular/common/http";
import { CustomHttpParameterCodec } from "../encoder";
import { Observable } from "rxjs";

// @ts-ignore
import { GroupV2GetUserClanInviteSetting200Response } from "../model/groupV2GetUserClanInviteSetting200Response";
// @ts-ignore
import { SocialGetFriendList200Response } from "../model/socialGetFriendList200Response";
// @ts-ignore
import { SocialGetFriendRequestList200Response } from "../model/socialGetFriendRequestList200Response";
// @ts-ignore
import { SocialGetPlatformFriendList200Response } from "../model/socialGetPlatformFriendList200Response";

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from "../variables";
import { Configuration } from "../configuration";

@Injectable({
  providedIn: "root",
})
export class SocialService {
  protected basePath = "https://www.bungie.net/Platform";
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  // @ts-ignore
  private addToHttpParams(
    httpParams: HttpParams,
    value: any,
    key?: string
  ): HttpParams {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(
    httpParams: HttpParams,
    value?: any,
    key?: string
  ): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === "object") {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) =>
            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(
            key,
            (value as Date).toISOString().substr(0, 10)
          );
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}.${k}` : k
            ))
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }

  /**
   * Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
   * @param membershipId The membership id of the user you wish to accept.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public socialAcceptFriendRequest(
    membershipId: string,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<GroupV2GetUserClanInviteSetting200Response>;
  public socialAcceptFriendRequest(
    membershipId: string,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<GroupV2GetUserClanInviteSetting200Response>>;
  public socialAcceptFriendRequest(
    membershipId: string,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<GroupV2GetUserClanInviteSetting200Response>>;
  public socialAcceptFriendRequest(
    membershipId: string,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    if (membershipId === null || membershipId === undefined) {
      throw new Error(
        "Required parameter membershipId was null or undefined when calling socialAcceptFriendRequest."
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (oauth2) required
    localVarCredential = this.configuration.lookupCredential("oauth2");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set(
        "Authorization",
        "Bearer " + localVarCredential
      );
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.post<GroupV2GetUserClanInviteSetting200Response>(
      `${
        this.configuration.basePath
      }/Social/Friends/Requests/Accept/${encodeURIComponent(
        String(membershipId)
      )}/`,
      null,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
   * @param membershipId The membership id of the user you wish to decline.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public socialDeclineFriendRequest(
    membershipId: string,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<GroupV2GetUserClanInviteSetting200Response>;
  public socialDeclineFriendRequest(
    membershipId: string,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<GroupV2GetUserClanInviteSetting200Response>>;
  public socialDeclineFriendRequest(
    membershipId: string,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<GroupV2GetUserClanInviteSetting200Response>>;
  public socialDeclineFriendRequest(
    membershipId: string,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    if (membershipId === null || membershipId === undefined) {
      throw new Error(
        "Required parameter membershipId was null or undefined when calling socialDeclineFriendRequest."
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (oauth2) required
    localVarCredential = this.configuration.lookupCredential("oauth2");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set(
        "Authorization",
        "Bearer " + localVarCredential
      );
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.post<GroupV2GetUserClanInviteSetting200Response>(
      `${
        this.configuration.basePath
      }/Social/Friends/Requests/Decline/${encodeURIComponent(
        String(membershipId)
      )}/`,
      null,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns your Bungie Friend list
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public socialGetFriendList(
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<SocialGetFriendList200Response>;
  public socialGetFriendList(
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<SocialGetFriendList200Response>>;
  public socialGetFriendList(
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<SocialGetFriendList200Response>>;
  public socialGetFriendList(
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (oauth2) required
    localVarCredential = this.configuration.lookupCredential("oauth2");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set(
        "Authorization",
        "Bearer " + localVarCredential
      );
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.get<SocialGetFriendList200Response>(
      `${this.configuration.basePath}/Social/Friends/`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns your friend request queue.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public socialGetFriendRequestList(
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<SocialGetFriendRequestList200Response>;
  public socialGetFriendRequestList(
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<SocialGetFriendRequestList200Response>>;
  public socialGetFriendRequestList(
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<SocialGetFriendRequestList200Response>>;
  public socialGetFriendRequestList(
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (oauth2) required
    localVarCredential = this.configuration.lookupCredential("oauth2");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set(
        "Authorization",
        "Bearer " + localVarCredential
      );
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.get<SocialGetFriendRequestList200Response>(
      `${this.configuration.basePath}/Social/Friends/Requests/`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
   * @param friendPlatform The platform friend type.
   * @param page The zero based page to return. Page size is 100.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public socialGetPlatformFriendList(
    friendPlatform: number,
    page: string,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<SocialGetPlatformFriendList200Response>;
  public socialGetPlatformFriendList(
    friendPlatform: number,
    page: string,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<SocialGetPlatformFriendList200Response>>;
  public socialGetPlatformFriendList(
    friendPlatform: number,
    page: string,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<SocialGetPlatformFriendList200Response>>;
  public socialGetPlatformFriendList(
    friendPlatform: number,
    page: string,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    if (friendPlatform === null || friendPlatform === undefined) {
      throw new Error(
        "Required parameter friendPlatform was null or undefined when calling socialGetPlatformFriendList."
      );
    }
    if (page === null || page === undefined) {
      throw new Error(
        "Required parameter page was null or undefined when calling socialGetPlatformFriendList."
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.get<SocialGetPlatformFriendList200Response>(
      `${
        this.configuration.basePath
      }/Social/PlatformFriends/${encodeURIComponent(
        String(friendPlatform)
      )}/${encodeURIComponent(String(page))}/`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Requests a friend relationship with the target user. Any of the target user\&#39;s linked membership ids are valid inputs.
   * @param membershipId The membership id of the user you wish to add.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public socialIssueFriendRequest(
    membershipId: string,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<GroupV2GetUserClanInviteSetting200Response>;
  public socialIssueFriendRequest(
    membershipId: string,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<GroupV2GetUserClanInviteSetting200Response>>;
  public socialIssueFriendRequest(
    membershipId: string,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<GroupV2GetUserClanInviteSetting200Response>>;
  public socialIssueFriendRequest(
    membershipId: string,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    if (membershipId === null || membershipId === undefined) {
      throw new Error(
        "Required parameter membershipId was null or undefined when calling socialIssueFriendRequest."
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (oauth2) required
    localVarCredential = this.configuration.lookupCredential("oauth2");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set(
        "Authorization",
        "Bearer " + localVarCredential
      );
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.post<GroupV2GetUserClanInviteSetting200Response>(
      `${this.configuration.basePath}/Social/Friends/Add/${encodeURIComponent(
        String(membershipId)
      )}/`,
      null,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
   * @param membershipId The membership id of the user you wish to remove.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public socialRemoveFriend(
    membershipId: string,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<GroupV2GetUserClanInviteSetting200Response>;
  public socialRemoveFriend(
    membershipId: string,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<GroupV2GetUserClanInviteSetting200Response>>;
  public socialRemoveFriend(
    membershipId: string,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<GroupV2GetUserClanInviteSetting200Response>>;
  public socialRemoveFriend(
    membershipId: string,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    if (membershipId === null || membershipId === undefined) {
      throw new Error(
        "Required parameter membershipId was null or undefined when calling socialRemoveFriend."
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (oauth2) required
    localVarCredential = this.configuration.lookupCredential("oauth2");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set(
        "Authorization",
        "Bearer " + localVarCredential
      );
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.post<GroupV2GetUserClanInviteSetting200Response>(
      `${
        this.configuration.basePath
      }/Social/Friends/Remove/${encodeURIComponent(String(membershipId))}/`,
      null,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
   * @param membershipId The membership id of the user you wish to remove.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public socialRemoveFriendRequest(
    membershipId: string,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<GroupV2GetUserClanInviteSetting200Response>;
  public socialRemoveFriendRequest(
    membershipId: string,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<GroupV2GetUserClanInviteSetting200Response>>;
  public socialRemoveFriendRequest(
    membershipId: string,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<GroupV2GetUserClanInviteSetting200Response>>;
  public socialRemoveFriendRequest(
    membershipId: string,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    if (membershipId === null || membershipId === undefined) {
      throw new Error(
        "Required parameter membershipId was null or undefined when calling socialRemoveFriendRequest."
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (oauth2) required
    localVarCredential = this.configuration.lookupCredential("oauth2");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set(
        "Authorization",
        "Bearer " + localVarCredential
      );
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.post<GroupV2GetUserClanInviteSetting200Response>(
      `${
        this.configuration.basePath
      }/Social/Friends/Requests/Remove/${encodeURIComponent(
        String(membershipId)
      )}/`,
      null,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
