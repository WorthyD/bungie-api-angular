/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from "@angular/core";
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from "@angular/common/http";
import { CustomHttpParameterCodec } from "../encoder";
import { Observable } from "rxjs";

// @ts-ignore
import { GetCommonSettings200Response } from "../model/getCommonSettings200Response";
// @ts-ignore
import { GetGlobalAlerts200Response } from "../model/getGlobalAlerts200Response";
// @ts-ignore
import { GetUserSystemOverrides200Response } from "../model/getUserSystemOverrides200Response";
// @ts-ignore
import { UserGetSanitizedPlatformDisplayNames200Response } from "../model/userGetSanitizedPlatformDisplayNames200Response";

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from "../variables";
import { Configuration } from "../configuration";

@Injectable({
  providedIn: "root",
})
export class DefaultService {
  protected basePath = "https://www.bungie.net/Platform";
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  // @ts-ignore
  private addToHttpParams(
    httpParams: HttpParams,
    value: any,
    key?: string
  ): HttpParams {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(
    httpParams: HttpParams,
    value?: any,
    key?: string
  ): HttpParams {
    if (value == null) {
      return httpParams;
    }
    return httpParams;
  }

    if (typeof value === "object") {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) =>
            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(
            key,
            (value as Date).toISOString().substr(0, 10)
          );
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}.${k}` : k
            ))
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }

  /**
   * List of available localization cultures
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAvailableLocales(
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<UserGetSanitizedPlatformDisplayNames200Response>;
  public getAvailableLocales(
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<UserGetSanitizedPlatformDisplayNames200Response>>;
  public getAvailableLocales(
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<UserGetSanitizedPlatformDisplayNames200Response>>;
  public getAvailableLocales(
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.get<UserGetSanitizedPlatformDisplayNames200Response>(
      `${this.configuration.basePath}/GetAvailableLocales/`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get the common settings used by the Bungie.Net environment.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCommonSettings(
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<GetCommonSettings200Response>;
  public getCommonSettings(
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<GetCommonSettings200Response>>;
  public getCommonSettings(
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<GetCommonSettings200Response>>;
  public getCommonSettings(
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.get<GetCommonSettings200Response>(
      `${this.configuration.basePath}/Settings/`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Gets any active global alert for display in the forum banners, help pages, etc. Usually used for DOC alerts.
   * @param includestreaming Determines whether Streaming Alerts are included in results
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getGlobalAlerts(
    includestreaming?: boolean,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<GetGlobalAlerts200Response>;
  public getGlobalAlerts(
    includestreaming?: boolean,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<GetGlobalAlerts200Response>>;
  public getGlobalAlerts(
    includestreaming?: boolean,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<GetGlobalAlerts200Response>>;
  public getGlobalAlerts(
    includestreaming?: boolean,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (includestreaming !== undefined && includestreaming !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>includestreaming,
        "includestreaming"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.get<GetGlobalAlerts200Response>(
      `${this.configuration.basePath}/GlobalAlerts/`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get the user-specific system overrides that should be respected alongside common systems.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getUserSystemOverrides(
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<GetUserSystemOverrides200Response>;
  public getUserSystemOverrides(
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpResponse<GetUserSystemOverrides200Response>>;
  public getUserSystemOverrides(
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<HttpEvent<GetUserSystemOverrides200Response>>;
  public getUserSystemOverrides(
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "*/*"; context?: HttpContext }
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["*/*"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "json";
      }
    }

    return this.httpClient.get<GetUserSystemOverrides200Response>(
      `${this.configuration.basePath}/UserSystemOverrides/`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
